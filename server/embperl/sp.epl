[-
#alias this as .php in the apache server config as anything else is untrusted

$http_headers_out{'Access-Control-Allow-Origin'} = "https://boards.4chan.org";
$http_headers_out{'Access-Control-Allow-Credentials'} = "true";
$http_headers_out{'Access-Control-Allow-Headers'} = "x-requested-with, if-modified-since";
$http_headers_out{'Content-Type'} = "text/JSON; charset=utf-8";

use open ':utf8';
use DBIx::Recordset;
use Data::Dumper;
use JSON;
use utf8;
use Encode;

#utf8::decode(%fdat);
#utf8::decode(foreach(qw(t p b n d e dnt)){utf8::decode(\%fdat{$_})}

my $thread     = %fdat{t};
my $post       = %fdat{p};
my $board      = %fdat{b};
my $name       = %fdat{n};
my $subject    = %fdat{s};
my $email      = %fdat{e};
my $donottrack = %fdat{dnt};


unless($post and $thread and $board){
        print OUT "";print STDERR ".";exit 1;
}
unless ($board =~ /[A-Za-z]{1,8}/){
        print OUT "invalid board";print STDERR "!2";exit 1;
}
unless ($thread =~ /[0-9]{1,32}/){
        print OUT "invalid thread";print STDERR "!3";exit 1;
}
unless ($post =~ /[0-9]{1,32}/){
        print OUT "invalid post";print STDERR "!4";exit 1;
}

#tripcode hash function
#de.osdn.net/projects/naniya/wiki/2chtrip
if($name=~/([^\#]*)\#(.+)/){
        $msg = $1;
        $hp  = $2;
        my $change_salt = substr($hp, , 1) . "H";
        $change_salt =~ tr/\x3A-\x40\x5B-\x60\x00-\x2D\x7B-\xFF/A-Ga-f./;
        $hp=substr(crypt($hp, $change_salt), -10);

}

$displayed_name = $msg;
$displayed_name .= "!".$hp."" if $hp;
$displayed_name = $name unless $displayed_name;

if(length($displayed_name) lt 1 and length($subject) lt 1 and length($email) lt 1){
        print OUT "no fields supplied ($name $hp $msg $subject $email)"; print STDERR "!!!!! 8 no fields";exit 1;
}

*set = DBIx::Recordset -> Search ({'!DataSource'           => 'dbi:mysql:'.$ENV{NS_DB_CONNECTION},
                                     '!Table'              => 'sync',
                                     '!WriteMode'          => 0,
                                    }) ;


$set -> Search ({p => $post});
if($set->Next ne undef){
        #print OUT "Post $post already exists";exit 1; #p is unique and a duplicate will throw an error
}

$set -> Insert ({p => $post, t => $thread, b => $board, u => $displayed_name, s => $subject, e => $email});

*set = DBIx::Recordset -> Search ({'!DataSource'           => 'dbi:mysql:'.$ENV{NS_DB_CONNECTION},
                                     '!Table'              => 's',
                                     '!WriteMode'          => 1,
                                    }) ;

$set -> Insert ({p => $post, t => $thread, b => $board, n => $displayed_name, s => $subject, e => $email});

-][]
